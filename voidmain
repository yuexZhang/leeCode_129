前言
这道题中，二叉树的每条从根节点到叶子节点的路径都代表一个数字。
其实，每个节点都对应一个数字，等于其父节点对应的数字乘以 1010 再加上该节点的值
（这里假设根节点的父节点对应的数字是 00）。只要计算出每个叶子节点对应的数字，
然后计算所有叶子节点对应的数字之和，即可得到结果。可以通过深度优先搜索和广度优先搜索实现。

深度优先搜索：
从根节点开始，遍历每个节点，如果遇到叶子节点，则将叶子节点对应的数字加到数字之和。
如果当前节点不是叶子节点，则计算其子节点对应的数字，然后对子节点递归遍历。

public class sumNumbers {
    public int sunNymbers(TreeNode root){
        return dfs(root, 0);
    }

    private int dfs(TreeNode root, int prevSum) {
        if (root == null){
            return 0;
        }
        int sum;
        sum = (prevSum * 10) + root.val;
        if (root.left == null && root.right == null){
            return sum;
        }else {
            return dfs(root.left, sum)+dfs(root.left,sum);
        }
    }
}
